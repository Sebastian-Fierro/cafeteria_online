// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  password    String
  name        String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  userToken   String?
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  products    Product[]
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
}

model Product {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  price       Int
  stock       Int       @default(0)
  categoryId  Int       @map("category_id")
  category    Category?  @relation(fields: [categoryId], references: [id])
  image       String?
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  updatedAt   DateTime  @updatedAt @map("updated_at")
  orderItems  OrderItem[]
}

model Order {
  id            Int           @id @default(autoincrement())
  customerName  String        @map("customer_name")
  email         String        
  items         OrderItem[]
  total         Float
  status        OrderStatus   @default(PENDING)
  createdAt     DateTime      @default(now()) @map("created_at")  
}

enum OrderStatus {
  PENDING
  IN_PREPARATION
  READY_FOR_PICKUP
  COMPLETED
  CANCELLED
}

model OrderItem {
  id          Int     @id @default(autoincrement())
  orderId     Int     @map("order_id")
  order       Order   @relation(fields: [orderId], references: [id])
  productId   Int     @map("product_id")
  product     Product @relation(fields: [productId], references: [id])
  quantity    Int     @default(1)
  price       Float
}